// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// NEXT AUTH MODELS
model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    accounts      Account[]
    sessions      Session[]
    appointments  Appointment[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// CUSTOM DATA MODELS
model Appointment {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    preferredPronouns String
    email             String
    phoneNumber       String
    description       String
    size              String
    placement         String
    color             String
    notes             String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @db.ObjectId
}

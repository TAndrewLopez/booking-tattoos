generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// NEXT AUTH MODELS
model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    accounts         Account[]
    sessions         Session[]
    appointments     Appointment[]
    appointmentNotes AppointmentNotes[]
    calendarEvents   CalendarEvent[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// CUSTOM DATA MODELS
model Appointment {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    name                 String
    preferredPronouns    String
    email                String
    phoneNumber          String
    description          String
    size                 String
    placement            String
    color                String
    accepted             Boolean?
    requiresConsultation Boolean?
    consultationDate     String?
    sessionsAmount       String?
    depositPaid          Boolean?
    rejectionReason      String?
    tattooReferral       String?
    referenceImageURL    String?
    firebaseRef          String?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    appointmentDates CalendarEvent[]
    notes            AppointmentNotes[]

    // TODO: EVENTUALLY CHANGE USERID WITH ARTISTID AND ALLOW ASSIGNING TO SPECIFIC ARTIST
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @db.ObjectId
}

model AppointmentNotes {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    appointmentId String?      @db.ObjectId
    Appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    userId        String?      @db.ObjectId
    user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    type        String?
    title       String
    date        DateTime
    description String
    label       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    appointmentId String?      @db.ObjectId
    Appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    // TODO: EVENTUALLY CHANGE USERID WITH ARTISTID AND ALLOW ASSIGNING TO SPECIFIC ARTIST
    User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @db.ObjectId
}
